<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Panuon.UI.Silver"
                    xmlns:core="clr-namespace:Panuon.UI.Silver.Core"
                    xmlns:irs="clr-namespace:Panuon.UI.Silver.Internal.Resources"
                    xmlns:rs="clr-namespace:Panuon.UI.Silver.Resources"
                    xmlns:ic="clr-namespace:Panuon.UI.Silver.Internal.Controls">
    <ResourceDictionary.MergedDictionaries>
        <core:SharedResourceDictionary Source="pack://application:,,,/Panuon.UI.Silver;component/Resources/Converters.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="{ComponentResourceKey ResourceId=ToggleStyle, TypeInTargetAssembly={x:Type local:TreeViewHelper}}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground"
                Value="{Binding Path=(local:TreeViewHelper.ItemToggleBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem},Mode=OneWay}" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="3,0" />
        <Setter Property="Content"
                Value="&#xe949;" />
        <Setter Property="FontFamily"
                Value="pack://application:,,,/Panuon.UI.Silver;component/Resources/Fonts/#PanuonIcon" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="Transparent">
                        <ContentPresenter x:Name="CpContent"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="False" />
                                <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemToggleHoverBrush),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}"
                                           Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="CpContent"
                                    Property="TextBlock.Foreground"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemToggleHoverBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
                            <Setter TargetName="CpContent"
                                    Property="TextElement.Foreground"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemToggleHoverBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemExpandedToggleBrush),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}"
                                           Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="CpContent"
                                    Property="TextBlock.Foreground"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemExpandedToggleBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
                            <Setter TargetName="CpContent"
                                    Property="TextElement.Foreground"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemExpandedToggleBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemSelectedToggleBrush),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}"
                                           Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="CpContent"
                                    Property="TextBlock.Foreground"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemSelectedToggleBrush), RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
                            <Setter TargetName="CpContent"
                                    Property="TextElement.Foreground"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemSelectedToggleBrush), RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked"
                     Value="True">
                <Setter Property="Content"
                        Value="&#xe94a;" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static irs:StyleKeys.TreeViewStyle}"
           TargetType="TreeView">
        <Setter Property="local:TreeViewHelper.ReferenceLineVisibility"
                Value="Collapsed"/>
        <Setter Property="local:TreeViewHelper.ItemsPadding"
                Value="15,0,0,0" />
        <Setter Property="local:TreeViewHelper.ItemsHeight"
                Value="30" />
        <Setter Property="VirtualizingStackPanel.IsVirtualizing"
                Value="True" />
        <Setter Property="local:TreeViewHelper.ItemsToggleBrush"
                Value="Gray" />
        <Setter Property="local:TreeViewHelper.ItemsToggleHoverBrush"
                Value="#CCCCCC" />
        <Setter Property="local:TreeViewHelper.ItemsExpandedToggleBrush"
                Value="#3E3E3E" />
        <Setter Property="local:TreeViewHelper.ItemsHoverBackground"
                Value="#FAFAFA" />
        <Setter Property="local:TreeViewHelper.ItemsSelectedBackground"
                Value="#F1F1F1" />
        <Setter Property="local:TreeViewHelper.ItemsBorderBrush"
                Value="{x:Null}" />
        <Setter Property="local:TreeViewHelper.ItemsBorderThickness"
                Value="0" />
        <Setter Property="local:TreeViewHelper.ItemsHoverBorderThickness"
                Value="{Binding Path=(local:TreeViewHelper.ItemsBorderThickness),RelativeSource={RelativeSource Self}, Mode=OneWay}" />
        <Setter Property="local:TreeViewHelper.ItemsSelectedBorderThickness"
                Value="{Binding Path=(local:TreeViewHelper.ItemsBorderThickness),RelativeSource={RelativeSource Self}, Mode=OneWay}" />
        <Setter Property="local:TreeViewHelper.ItemsToggleStyle"
                Value="{StaticResource {ComponentResourceKey ResourceId=ToggleStyle, TypeInTargetAssembly={x:Type local:TreeViewHelper}}}" />
        <Setter Property="VirtualizingStackPanel.VirtualizationMode"
                Value="Recycling" />
        <Setter Property="ScrollViewer.CanContentScroll"
                Value="True" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeView">
                    <Border x:Name="BdrMain"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer Focusable="False"
                                      Padding="{TemplateBinding Padding}"
                                      VerticalScrollBarVisibility="{Binding Path=(ScrollViewer.VerticalScrollBarVisibility),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                      HorizontalScrollBarVisibility="{Binding Path=(ScrollViewer.HorizontalScrollBarVisibility),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                      CanContentScroll="{Binding Path=(ScrollViewer.CanContentScroll),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Opacity"
                        Value="0.4" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="TreeViewItem">
        <!--IconHelper-->
        <Setter Property="local:IconHelper.Foreground"
                Value="{Binding Foreground, RelativeSource={RelativeSource Self}}" />
        <!--TreeViewHelper-->
        <Setter Property="local:TreeViewHelper.ItemHeight"
                Value="{Binding Path=(local:TreeViewHelper.ItemsHeight),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="BorderBrush"
                Value="{Binding Path=(local:TreeViewHelper.ItemsBorderBrush),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="BorderThickness"
                Value="{Binding Path=(local:TreeViewHelper.ItemsBorderThickness),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemIcon"
                Value="{Binding Path=(local:TreeViewHelper.ItemsIcon),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemPadding"
                Value="{Binding Path=(local:TreeViewHelper.ItemsPadding),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemToggleEnabled"
                Value="{Binding Path=(local:TreeViewHelper.ItemsToggleEnabled),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemToggleBrush"
                Value="{Binding Path=(local:TreeViewHelper.ItemsToggleBrush),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemToggleHoverBrush"
                Value="{Binding Path=(local:TreeViewHelper.ItemsToggleHoverBrush),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemExpandedToggleBrush"
                Value="{Binding Path=(local:TreeViewHelper.ItemsExpandedToggleBrush),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemHoverForeground"
                Value="{Binding Path=(local:TreeViewHelper.ItemsHoverForeground),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemHoverBackground"
                Value="{Binding Path=(local:TreeViewHelper.ItemsHoverBackground),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemHoverBorderBrush"
                Value="{Binding Path=(local:TreeViewHelper.ItemsHoverBorderBrush),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemHoverBorderThickness"
                Value="{Binding Path=(local:TreeViewHelper.ItemsHoverBorderThickness),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemSelectedBackground"
                Value="{Binding Path=(local:TreeViewHelper.ItemsSelectedBackground),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemSelectedForeground"
                Value="{Binding Path=(local:TreeViewHelper.ItemsSelectedForeground),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemSelectedToggleBrush"
                Value="{Binding Path=(local:TreeViewHelper.ItemsSelectedToggleBrush),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemSelectedBorderBrush"
                Value="{Binding Path=(local:TreeViewHelper.ItemsSelectedBorderBrush),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemSelectedBorderThickness"
                Value="{Binding Path=(local:TreeViewHelper.ItemsSelectedBorderThickness),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemToggleStyle"
                Value="{Binding Path=(local:TreeViewHelper.ItemsToggleStyle),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <!--Properties-->
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="Padding">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource {x:Static irs:Converters.TreeViewPaddingConverter}}">
                    <Binding Path="Padding"
                             RelativeSource="{RelativeSource AncestorType=TreeViewItem}"
                             Mode="OneWay" />
                    <Binding Path="(local:TreeViewHelper.ItemsPadding)"
                             RelativeSource="{RelativeSource AncestorType=TreeView}"
                             Mode="OneWay" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeViewItem">
                    <StackPanel>
                        <Border x:Name="BdrHeader"
                                Grid.ColumnSpan="3"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Height="{Binding Path=(local:TreeViewHelper.ItemHeight),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Rectangle x:Name="RectHorizontal"
                                           RenderOptions.EdgeMode="Aliased"
                                           StrokeThickness="1"
                                           Stroke="Gray"
                                           StrokeDashArray="2,3"
                                           VerticalAlignment="Center"
                                           Margin="{Binding ActualWidth, Converter={StaticResource {x:Static irs:Converters.TreeViewChainHorizontalMarginConverter}},ElementName=TgbToggle, Mode=OneWay}" />
                                <ToggleButton x:Name="TgbToggle"
                                              Margin="{TemplateBinding Padding}"
                                              IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}"
                                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Style="{Binding Path=(local:TreeViewHelper.ItemToggleStyle), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                                <ic:IconControl x:Name="icIcon"
                                                Grid.Column="1"
                                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                Content="{Binding Path=(local:TreeViewHelper.ItemIcon), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                                Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                                <ContentPresenter x:Name="CpHeader"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Grid.Column="2"
                                                  ContentSource="Header" />

                            </Grid>
                        </Border>
                        <Grid x:Name="GrdItems"
                              Visibility="Collapsed">
                            <ItemsPresenter x:Name="ItemsHost" />
                            <Rectangle x:Name="RectVertical"
                                       RenderOptions.EdgeMode="Aliased"
                                       StrokeThickness="1"
                                       Stroke="Gray"
                                       StrokeDashArray="2,3"
                                       HorizontalAlignment="Left">
                                <Rectangle.Margin>
                                    <MultiBinding Converter="{StaticResource {x:Static irs:Converters.TreeViewChainVerticalMarginConverter}}">
                                        <Binding Path="ActualWidth"
                                                 ElementName="TgbToggle"
                                                 Mode="OneWay" />
                                        <Binding Path="Padding"
                                                 RelativeSource="{RelativeSource TemplatedParent}"
                                                 Mode="OneWay" />
                                    </MultiBinding>
                                </Rectangle.Margin>
                            </Rectangle>
                        </Grid>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasItems"
                                           Value="True" />
                                <Condition Property="IsExpanded"
                                           Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="GrdItems"
                                    Property="Visibility"
                                    Value="Visible" />
                        </MultiTrigger>
                        <DataTrigger Binding="{Binding Path=(local:TreeViewHelper.ReferenceLineVisibility), RelativeSource={RelativeSource AncestorType=TreeView}, Mode=OneWay}"
                                     Value="Visible">
                            <Setter TargetName="RectHorizontal"
                                    Property="Visibility"
                                    Value="{Binding HasItems, Converter={StaticResource {x:Static rs:Converters.TrueToCollapseConverter}}, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=(local:TreeViewHelper.ReferenceLineVisibility), RelativeSource={RelativeSource AncestorType=TreeView}, Mode=OneWay}"
                                 Value="Hidden">
                            <Setter TargetName="RectVertical"
                                    Property="Visibility"
                                    Value="Hidden" />
                            <Setter TargetName="RectHorizontal"
                                    Property="Visibility"
                                    Value="Hidden" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=(local:TreeViewHelper.ReferenceLineVisibility), RelativeSource={RelativeSource AncestorType=TreeView}, Mode=OneWay}"
                                     Value="Collapsed">
                            <Setter TargetName="RectVertical"
                                    Property="Visibility"
                                    Value="Collapsed" />
                            <Setter TargetName="RectHorizontal"
                                    Property="Visibility"
                                    Value="Collapsed" />
                        </DataTrigger>
                        <Trigger SourceName="BdrHeader"
                                 Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="local:TreeViewHelper.ItemIsMouseOver"
                                    Value="True" />
                        </Trigger>
                        <Trigger Property="HasItems"
                                 Value="False">
                            <Setter TargetName="TgbToggle"
                                    Property="Visibility"
                                    Value="Hidden" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemIsMouseOver), RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="False" />
                                <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemHoverForeground),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="CpHeader"
                                    Property="TextBlock.Foreground"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemHoverForeground),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                            <Setter TargetName="CpHeader"
                                    Property="TextElement.Foreground"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemHoverForeground),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemIsMouseOver), RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="False" />
                                <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemHoverBackground),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="BdrHeader"
                                    Property="Background"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemHoverBackground),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemSelectedForeground),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="CpHeader"
                                    Property="TextBlock.Foreground"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemSelectedForeground),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                            <Setter TargetName="CpHeader"
                                    Property="TextElement.Foreground"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemSelectedForeground),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemSelectedBackground),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="BdrHeader"
                                    Property="Background"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemSelectedBackground),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemSelectedBorderBrush),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="BdrHeader"
                                    Property="BorderBrush"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemSelectedBorderBrush),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemSelectedBorderThickness),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="BdrHeader"
                                    Property="BorderThickness"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemSelectedBorderThickness),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="False" />
                                <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemIsMouseOver),RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemHoverBorderBrush),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="BdrHeader"
                                    Property="BorderBrush"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemHoverBorderBrush),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="False" />
                                <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemIsMouseOver),RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemHoverBorderThickness),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="BdrHeader"
                                    Property="BorderThickness"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemHoverBorderThickness),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Opacity"
                        Value="0.4" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
