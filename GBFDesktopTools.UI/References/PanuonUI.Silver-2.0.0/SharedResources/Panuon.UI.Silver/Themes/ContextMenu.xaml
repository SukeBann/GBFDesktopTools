<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Panuon.UI.Silver"
                    xmlns:core="clr-namespace:Panuon.UI.Silver.Core"
                    xmlns:irs="clr-namespace:Panuon.UI.Silver.Internal.Resources"
                    xmlns:rs="clr-namespace:Panuon.UI.Silver.Resources"
                    xmlns:ic="clr-namespace:Panuon.UI.Silver.Internal.Controls">
    <ResourceDictionary.MergedDictionaries>
        <core:SharedResourceDictionary Source="pack://application:,,,/Panuon.UI.Silver;component/Resources/Converters.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="ContextMenu"
           x:Key="{x:Static irs:StyleKeys.ContextMenuStyle}">
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="local:ContextMenuHelper.ItemsHeight"
                Value="30" />
        <Setter Property="local:ContextMenuHelper.ItemsWidth"
                Value="200" />
        <Setter Property="local:ContextMenuHelper.ItemsBackground"
                Value="Transparent" />
        <Setter Property="local:ContextMenuHelper.ItemsHoverBackground"
                Value="#F1F1F1" />
        <Setter Property="local:ContextMenuHelper.ItemsForeground"
                Value="#3E3E3E" />
        <Setter Property="local:ContextMenuHelper.ShadowColor"
                Value="LightGray" />
        <Setter Property="Background"
                Value="White" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="FontFamily"
                Value="{Binding Source={x:Static irs:GlobalHelper.FontFamily}}" />
        <Setter Property="FontSize"
                Value="{Binding Source={x:Static irs:GlobalHelper.FontSize}}" />
        <Setter Property="Padding"
                Value="0,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContextMenu">
                    <Border x:Name="BdrMain"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="{Binding Path=(local:ContextMenuHelper.CornerRadius), RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                            Effect="{Binding Path=(local:ContextMenuHelper.ShadowColor), Converter={StaticResource {x:Static irs:Converters.DropShadowEffectCoverter}}, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                        <ScrollViewer  VerticalScrollBarVisibility="{Binding Path=(ScrollViewer.VerticalScrollBarVisibility), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                       HorizontalScrollBarVisibility="{Binding Path=(ScrollViewer.HorizontalScrollBarVisibility), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                       Margin="{TemplateBinding Padding}">
                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(local:ContextMenuHelper.ShadowColor), Converter= {StaticResource {x:Static rs:Converters.IsNotNullConverter}}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                     Value="True">
                            <Setter TargetName="BdrMain"
                                    Property="Margin"
                                    Value="5" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style TargetType="MenuItem">
                <Setter Property="local:ContextMenuHelper.ItemHoverBackground"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemsHoverBackground), RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay}" />
                <Setter Property="local:ContextMenuHelper.ItemHoverBorderBrush"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemsHoverBorderBrush), RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay}" />
                <Setter Property="local:ContextMenuHelper.ItemHoverForeground"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemsHoverForeground), RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay}" />
                <Setter Property="Icon"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemsIcon), RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay}" />
                <Setter Property="Foreground"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemsForeground), RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay}" />
                <Setter Property="Background"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemsBackground), RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay}" />
                <Setter Property="BorderBrush"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemsBorderBrush), RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay}" />
                <Setter Property="Height"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemsHeight), RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay}" />
                <Setter Property="BorderThickness"
                        Value="1" />
                <Setter Property="Width"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemsWidth), RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="MenuItem">
                            <Grid>
                                <Border BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        Background="{TemplateBinding Background}" />
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Border Width="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                                        <ic:IconControl x:Name="icIcon"
                                                        Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                                        Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                                    </Border>
                                    <ContentPresenter x:Name="CpHeader"
                                                      Grid.Column="1"
                                                      RecognizesAccessKey="True"
                                                      Margin="{TemplateBinding Padding}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      ContentSource="Header" />
                                    <TextBlock x:Name="TxtArrow"
                                               Grid.Column="2"
                                               Visibility="Collapsed"
                                               VerticalAlignment="Center"
                                               Text="&#xe902;"
                                               FontFamily="pack://application:,,,/Panuon.UI.Silver;component/Resources/#PanuonIcon"
                                               Margin="0,0,3,0" />
                                </Grid>
                                <Popup x:Name="Popup"
                                       Placement="Right"
                                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                                       AllowsTransparency="True"
                                       Focusable="False"
                                       PopupAnimation="Fade"
                                       HorizontalOffset="2">
                                    <Grid x:Name="GrdSubmenu"
                                          Margin="10">
                                        <Border x:Name="BdrSubmenu"
                                                SnapsToDevicePixels="True"
                                                BorderThickness="{Binding BorderThickness,RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                                BorderBrush="{Binding BorderBrush,RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                                Background="{Binding Background,RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                                Width="{Binding Width,RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                                CornerRadius="{Binding Path=(local:ContextMenuHelper.CornerRadius),RelativeSource={RelativeSource AncestorType=ContextMenu},Mode=OneWay}"
                                                Effect="{Binding Path=(local:ContextMenuHelper.ShadowColor), Converter={StaticResource {x:Static irs:Converters.DropShadowEffectCoverter}}, RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay}" />
                                        <ScrollViewer Margin="{Binding Padding, RelativeSource={RelativeSource AncestorType=ContextMenu},Mode=OneWay}">
                                            <StackPanel IsItemsHost="True"
                                                        KeyboardNavigation.DirectionalNavigation="Cycle" />
                                        </ScrollViewer>
                                    </Grid>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked"
                                         Value="True">
                                    <Setter Property="Icon">
                                        <Setter.Value>
                                            <TextBlock Text="&#xe92e;"
                                                       FontFamily="/Panuon.UI.Silver;component/Resources/Fonts/#PanuonIcon"
                                                       VerticalAlignment="Center"
                                                       HorizontalAlignment="Center" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="HasItems"
                                         Value="True">
                                    <Setter TargetName="TxtArrow"
                                            Property="Visibility"
                                            Value="Visible" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                       Value="True" />
                            <Condition Binding="{Binding Path=(local:ContextMenuHelper.ItemHoverForeground),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                       Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Foreground"
                                Value="{Binding Path=(local:ContextMenuHelper.ItemHoverForeground),RelativeSource={RelativeSource Self}, Mode=OneWay}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                       Value="True" />
                            <Condition Binding="{Binding Path=(local:ContextMenuHelper.ItemHoverBackground),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                       Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Background"
                                Value="{Binding Path=(local:ContextMenuHelper.ItemHoverBackground),RelativeSource={RelativeSource Self}, Mode=OneWay}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                       Value="True" />
                            <Condition Binding="{Binding Path=(local:ContextMenuHelper.ItemHoverBorderBrush),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                       Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="BorderBrush"
                                Value="{Binding Path=(local:ContextMenuHelper.ItemHoverBorderBrush),RelativeSource={RelativeSource Self}, Mode=OneWay}" />
                    </MultiDataTrigger>

                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

</ResourceDictionary>
