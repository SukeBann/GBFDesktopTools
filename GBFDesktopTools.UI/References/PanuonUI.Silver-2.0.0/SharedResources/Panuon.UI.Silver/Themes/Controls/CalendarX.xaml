<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Panuon.UI.Silver"
                    xmlns:rs="clr-namespace:Panuon.UI.Silver.Resources"
                    xmlns:irs="clr-namespace:Panuon.UI.Silver.Internal.Resources"
                    xmlns:ic="clr-namespace:Panuon.UI.Silver.Internal.Controls"
                    xmlns:core="clr-namespace:Panuon.UI.Silver.Core">
    <ResourceDictionary.MergedDictionaries>
        <core:SharedResourceDictionary Source="pack://application:,,,/Panuon.UI.Silver;component/Resources/Converters.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="{ComponentResourceKey ResourceId=PreviousButtonStyle, TypeInTargetAssembly={x:Type local:CalendarX}}"
               TargetType="RepeatButton">
            <Setter Property="local:RepeatButtonHelper.Hook"
                    Value="True" />
        <Setter Property="local:RepeatButtonHelper.HoverForeground"
                Value="Gray" />
        <Setter Property="Content"
                    Value="&#xe900;" />
            <Setter Property="Width"
                    Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
            <Setter Property="FontSize"
                    Value="{Binding FontSize, Converter={StaticResource {x:Static rs:Converters.DoublePlusConverter}}, ConverterParameter=2, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
            <Setter Property="FontFamily"
                    Value="/Panuon.UI.Silver;component/Resources/Fonts/#PanuonIcon" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RepeatButton">
                        <Border Background="Transparent">
                            <ContentPresenter VerticalAlignment="Center"
                                              HorizontalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=BackwardButtonStyle, TypeInTargetAssembly={x:Type local:CalendarX}}"
           TargetType="RepeatButton">
        <Setter Property="local:RepeatButtonHelper.Hook"
                Value="True" />
        <Setter Property="local:RepeatButtonHelper.HoverForeground"
                Value="Gray" />
        <Setter Property="Content"
                Value="&#xe924;" />
        <Setter Property="Width"
                Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
        <Setter Property="FontSize"
                Value="{Binding FontSize, Converter={StaticResource {x:Static rs:Converters.DoublePlusConverter}}, ConverterParameter=2, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
        <Setter Property="FontFamily"
                Value="/Panuon.UI.Silver;component/Resources/Fonts/#PanuonIcon" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Background="Transparent">
                        <ContentPresenter VerticalAlignment="Center"
                                          HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=NextButtonStyle, TypeInTargetAssembly={x:Type local:CalendarX}}"
           TargetType="RepeatButton">
        <Setter Property="local:RepeatButtonHelper.Hook"
                Value="True" />
        <Setter Property="local:RepeatButtonHelper.HoverForeground"
                Value="Gray" />
        <Setter Property="Content"
                Value="&#xe902;" />
        <Setter Property="Width"
                Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
        <Setter Property="FontSize"
                Value="{Binding FontSize, Converter={StaticResource {x:Static rs:Converters.DoublePlusConverter}}, ConverterParameter=2, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
        <Setter Property="FontFamily"
                Value="/Panuon.UI.Silver;component/Resources/Fonts/#PanuonIcon" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Background="Transparent">
                        <ContentPresenter VerticalAlignment="Center"
                                          HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=ForwardButtonStyle, TypeInTargetAssembly={x:Type local:CalendarX}}"
           TargetType="RepeatButton">
        <Setter Property="local:RepeatButtonHelper.Hook"
                Value="True" />
        <Setter Property="local:RepeatButtonHelper.HoverForeground"
                Value="Gray" />
        <Setter Property="Content"
                Value="&#xe926;" />
        <Setter Property="Width"
                Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
        <Setter Property="FontSize"
                Value="{Binding FontSize, Converter={StaticResource {x:Static rs:Converters.DoublePlusConverter}}, ConverterParameter=2, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
        <Setter Property="FontFamily"
                Value="/Panuon.UI.Silver;component/Resources/Fonts/#PanuonIcon" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Background="Transparent">
                        <ContentPresenter VerticalAlignment="Center"
                                          HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="{ComponentResourceKey ResourceId=YearButtonStyle, TypeInTargetAssembly={x:Type local:CalendarX}}"
           TargetType="Button">
        <Setter Property="local:ButtonHelper.Hook"
                Value="True" />
        <Setter Property="local:ButtonHelper.HoverForeground"
                Value="Gray" />
        <Setter Property="FontSize"
                Value="{Binding FontSize, Converter={StaticResource {x:Static rs:Converters.DoublePlusConverter}}, ConverterParameter=3, RelativeSource={RelativeSource AncestorType=local:CalendarX}, Mode=OneWay}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="Transparent">
                        <ContentPresenter VerticalAlignment="Center"
                                          HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=MonthButtonStyle, TypeInTargetAssembly={x:Type local:CalendarX}}"
           TargetType="Button">
        <Setter Property="local:ButtonHelper.Hook"
                Value="True" />
        <Setter Property="local:ButtonHelper.HoverForeground"
                Value="Gray" />
        <Setter Property="FontSize"
                Value="{Binding FontSize, Converter={StaticResource {x:Static rs:Converters.DoublePlusConverter}}, ConverterParameter=3, RelativeSource={RelativeSource AncestorType=local:CalendarX}, Mode=OneWay}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="Transparent">
                        <ContentPresenter VerticalAlignment="Center"
                                          HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=CalendarXItemStyle, TypeInTargetAssembly={x:Type local:CalendarX}}"
           TargetType="local:CalendarXItem">
    </Style>

    <Style x:Key="{x:Static irs:StyleKeys.CalendarXStyle}"
           TargetType="local:CalendarX">
        <Setter Property="BorderBrush"
                Value="LightGray" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="HeaderHeight"
                Value="40" />
        <Setter Property="CalendarXItemStyle"
                Value="{StaticResource {ComponentResourceKey ResourceId=CalendarXItemStyle, TypeInTargetAssembly={x:Type local:CalendarX}}}" />
        <Setter Property="YearButtonStyle"
                Value="{StaticResource {ComponentResourceKey ResourceId=YearButtonStyle, TypeInTargetAssembly={x:Type local:CalendarX}}}" />
        <Setter Property="MonthButtonStyle"
                Value="{StaticResource {ComponentResourceKey ResourceId=MonthButtonStyle, TypeInTargetAssembly={x:Type local:CalendarX}}}" />
        <Setter Property="BackwardButtonStyle"
                Value="{StaticResource {ComponentResourceKey ResourceId=BackwardButtonStyle, TypeInTargetAssembly={x:Type local:CalendarX}}}" />
        <Setter Property="ForwardButtonStyle"
                Value="{StaticResource {ComponentResourceKey ResourceId=ForwardButtonStyle, TypeInTargetAssembly={x:Type local:CalendarX}}}" />
        <Setter Property="NextButtonStyle"
                Value="{StaticResource {ComponentResourceKey ResourceId=NextButtonStyle, TypeInTargetAssembly={x:Type local:CalendarX}}}" />
        <Setter Property="PreviousButtonStyle"
                Value="{StaticResource {ComponentResourceKey ResourceId=PreviousButtonStyle, TypeInTargetAssembly={x:Type local:CalendarX}}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:CalendarX">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Border Grid.RowSpan="2"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"/>
                        <Grid Height="{TemplateBinding HeaderHeight}"
                              Background="{TemplateBinding HeaderBackground}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <RepeatButton x:Name="PART_BackwardButton"
                                    Style="{TemplateBinding BackwardButtonStyle}"/>
                            <RepeatButton x:Name="PART_PreviousButton"
                                    Grid.Column="1"
                                    Style="{TemplateBinding PreviousButtonStyle}"/>
                            <StackPanel Grid.Column="2"
                                        Orientation="Horizontal"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center">
                                <Button x:Name="PART_MonthButton"
                                        Style="{TemplateBinding MonthButtonStyle}" />
                                <Button x:Name="PART_YearButton"
                                        Margin="10,0,0,0"
                                        Style="{TemplateBinding YearButtonStyle}" />
                            </StackPanel>
                            <RepeatButton x:Name="PART_NextButton"
                                    Grid.Column="3"
                                    Style="{TemplateBinding NextButtonStyle}" />
                            <RepeatButton x:Name="PART_ForwardButton"
                                    Grid.Column="4"
                                    Style="{TemplateBinding ForwardButtonStyle}" />
                        </Grid>
                        <local:StickyPanel CurrentIndex="{TemplateBinding CurrentPanel}"
                                           Grid.Row="1">
                            <Grid x:Name="GrdDay">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="6*" />
                                </Grid.RowDefinitions>
                                <ic:CalendarXWeekPresenter x:Name="PART_WeekPresenter" />
                                <ic:CalendarXDayPresenter x:Name="PART_DayPresenter"
                                                          Grid.Row="1" />
                            </Grid>
                            <Grid x:Name="GrdMonth">
                                <ic:CalendarXMonthPresenter x:Name="PART_MonthPresenter" />
                            </Grid>
                            <Grid x:Name="GrdYear">
                                <ic:CalendarXYearPresenter x:Name="PART_YearPresenter" />
                            </Grid>
                        </local:StickyPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Mode"
                                 Value="YearMonth">
                            <Setter TargetName="PART_BackwardButton"
                                    Property="Visibility"
                                    Value="Collapsed"/>
                            <Setter TargetName="PART_ForwardButton"
                                    Property="Visibility"
                                    Value="Collapsed" />
                            <Setter TargetName="GrdDay"
                                    Property="Visibility"
                                    Value="Hidden" />
                        </Trigger>
                        <Trigger Property="Mode"
                                 Value="Year">
                            <Setter TargetName="PART_BackwardButton"
                                    Property="Visibility"
                                    Value="Collapsed" />
                            <Setter TargetName="PART_ForwardButton"
                                    Property="Visibility"
                                    Value="Collapsed" />
                            <Setter TargetName="GrdDay"
                                    Property="Visibility"
                                    Value="Hidden" />
                            <Setter TargetName="GrdMonth"
                                    Property="Visibility"
                                    Value="Hidden" />
                            <Setter TargetName="PART_MonthButton" 
                                    Property="Visibility"
                                    Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Mode"
                     Value="YearMonth">
                <Setter Property="CurrentPanel"
                        Value="1" />
            </Trigger>
            <Trigger Property="Mode"
                     Value="Year">
                <Setter Property="CurrentPanel"
                        Value="2" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style TargetType="local:CalendarXItem">
        <Setter Property="local:ToggleButtonHelper.Hook"
                Value="True" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="local:ToggleButtonHelper.HoverBackground"
                Value="#F1F1F1" />
        <Setter Property="local:ToggleButtonHelper.CheckedBackground"
                Value="#E1E1E1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:CalendarXItem">
                    <Grid>
                        <Border x:Name="BdrMain"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                CornerRadius="{Binding Path=(local:ToggleButtonHelper.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                        <Grid x:Name="GrdContent"
                              Margin="{TemplateBinding Padding}">
                            <Ellipse x:Name="EllToday"
                                     VerticalAlignment="Top"
                                     HorizontalAlignment="Right"
                                     Width="6"
                                     Height="6"
                                     Visibility="Collapsed"
                                     Fill="{TemplateBinding Foreground}" />
                            <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsToday"
                                 Value="True">
                            <Setter TargetName="EllToday"
                                    Property="Visibility"
                                    Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsInRange"
                                 Value="True">
                            <Setter TargetName="BdrMain" 
                                    Property="Background"
                                    Value="{Binding Path=(local:ToggleButtonHelper.HoverBackground), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                        </Trigger>
                     
                        <Trigger Property="IsDownplay"
                                 Value="True">
                            <Setter TargetName="GrdContent"
                                    Property="Opacity"
                                    Value="0.4" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsInRange"
                                           Value="False" />
                                <Condition Property="IsDownplay"
                                           Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="BdrMain"
                                    Property="Opacity"
                                    Value="0.4" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Opacity"
                        Value="0.1" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(local:ToggleButtonHelper.CheckedBackground), Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background"
                        Value="{Binding Path=(local:ToggleButtonHelper.CheckedBackground), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(local:ToggleButtonHelper.CheckedForeground), Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground"
                        Value="{Binding Path=(local:ToggleButtonHelper.CheckedForeground), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(local:ToggleButtonHelper.CheckedBorderBrush), Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderBrush"
                        Value="{Binding Path=(local:ToggleButtonHelper.CheckedBorderBrush), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>


</ResourceDictionary>
