<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Panuon.UI.Silver"
                    xmlns:i="clr-namespace:Panuon.UI.Silver.Internal"
                    xmlns:ic="clr-namespace:Panuon.UI.Silver.Internal.Controls"
                    xmlns:rs="clr-namespace:Panuon.UI.Silver.Resources">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Panuon.UI.Silver;component/Resources/InternalResources.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Panuon.UI.Silver;component/Resources/Resources.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <ControlTemplate x:Key="ContextMenuTemplate"
                     TargetType="ContextMenu">
        <Border x:Name="BdrMain"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                CornerRadius="{Binding Path=(local:ContextMenuHelper.CornerRadius),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                Effect="{Binding Path=(local:ContextMenuHelper.ShadowColor), Converter={StaticResource {x:Static i:ResourceKeys.NullableColorToShadowEffectConverter}}, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                Margin="5">
            <ScrollViewer  VerticalScrollBarVisibility="{Binding Path=(ScrollViewer.VerticalScrollBarVisibility),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                           HorizontalScrollBarVisibility="{Binding Path=(ScrollViewer.HorizontalScrollBarVisibility),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                           Margin="{TemplateBinding Padding}">
                <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle" />
            </ScrollViewer>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="ContextMenuItemTemplate"
                     TargetType="MenuItem">
        <Border x:Name="BdrMain"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}">
            <Grid>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding ActualHeight,Converter={StaticResource {x:Static i:ResourceKeys.GridLengthConverter}}, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <ic:IconControl x:Name="IcIcon"
                                    Width="{Binding Path=(local:IconHelper.Width),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    Height="{Binding Path=(local:IconHelper.Height),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    MinWidth="{Binding Path=(local:IconHelper.MinWidth),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    MinHeight="{Binding Path=(local:IconHelper.MinHeight),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    MaxWidth="{Binding Path=(local:IconHelper.MaxWidth),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    MaxHeight="{Binding Path=(local:IconHelper.MaxHeight),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    Margin="{Binding Path=(local:IconHelper.Margin),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    Visibility="{Binding Icon,Converter={StaticResource {x:Static i:ResourceKeys.NullToCollapseConverter}},RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    Content="{Binding Icon,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    Foreground="{Binding Path=(local:IconHelper.Foreground),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    FontFamily="{Binding Path=(local:IconHelper.FontFamily),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    FontSize="{Binding Path=(local:IconHelper.FontSize),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Center" />
                    <ContentPresenter x:Name="CpHeader"
                                      Grid.Column="1"
                                      RecognizesAccessKey="True"
                                      Margin="{TemplateBinding Padding}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      ContentSource="Header" />
                    <TextBlock x:Name="TxtArrow"
                               Grid.Column="2"
                               Visibility="Collapsed"
                               VerticalAlignment="Center"
                               Text="&#xe902;"
                               FontFamily="pack://application:,,,/Panuon.UI.Silver;component/Resources/#PanuonIcon"
                               Margin="0,0,3,0"/>
                </Grid>
                <Popup x:Name="Popup"
                       Placement="Right"
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       AllowsTransparency="True"
                       Focusable="False"
                       PopupAnimation="Fade"
                       HorizontalOffset="2">
                    <Grid x:Name="GrdSubmenu"
                          Margin="10">
                        <Border x:Name="BdrSubmenu"
                                SnapsToDevicePixels="True"
                                BorderThickness="{Binding BorderThickness,RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                BorderBrush="{Binding BorderBrush,RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                Background="{Binding Background,RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                Width="{Binding Width,RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                CornerRadius="{Binding Path=(local:ContextMenuHelper.CornerRadius),RelativeSource={RelativeSource AncestorType=ContextMenu},Mode=OneWay}">
                            <Border.Effect>
                                <DropShadowEffect ShadowDepth="0"
                                                  BlurRadius="5"
                                                  Opacity="1"
                                                  Color="{Binding Path=(local:ContextMenuHelper.ShadowColor),RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay, Converter={StaticResource {x:Static i:ResourceKeys.NullableColorToColorConverter}}}" />
                            </Border.Effect>
                        </Border>
                        <ScrollViewer Margin="{Binding Padding,RelativeSource={RelativeSource AncestorType=ContextMenu},Mode=OneWay}">
                            <StackPanel IsItemsHost="True"
                                        KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </ScrollViewer>
                    </Grid>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:ContextMenuHelper.ItemHoverBackground),Converter={StaticResource {x:Static i:ResourceKeys.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="BdrMain"
                        Property="Background"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemHoverBackground),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:ContextMenuHelper.ItemHoverBorderBrush),Converter={StaticResource {x:Static i:ResourceKeys.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="BdrMain"
                        Property="BorderBrush"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemHoverBorderBrush),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
            </MultiDataTrigger>
            <Trigger Property="IsChecked"
                     Value="True">
                <Setter Property="Icon">
                    <Setter.Value>
                        <TextBlock Text="&#xe92e;"
                                   FontFamily="{StaticResource PanuonIconFont}"
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="Center" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="HasItems"
                     Value="True">
                <Setter TargetName="TxtArrow"
                        Property="Visibility"
                        Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <Style TargetType="ContextMenu">
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="local:ContextMenuHelper.ItemsHeight"
                Value="30" />
        <Setter Property="local:ContextMenuHelper.ItemsMinWidth"
                Value="150" />
        <Setter Property="local:ContextMenuHelper.ItemsBackground"
                Value="Transparent" />
        <Setter Property="local:ContextMenuHelper.ItemsHoverBackground"
                Value="#F1F1F1" />
        <Setter Property="local:ContextMenuHelper.ItemsForeground"
                Value="#3E3E3E" />
        <Setter Property="local:ContextMenuHelper.ShadowColor"
                Value="LightGray" />
        <Setter Property="Background"
                Value="White" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="FontFamily"
                Value="{Binding Source={x:Static i:GlobalHelper.FontFamily}}" />
        <Setter Property="FontSize"
                Value="{Binding Source={x:Static i:GlobalHelper.FontSize}}" />
        <Setter Property="Padding"
                Value="0,2" />
        <Setter Property="Template"
                Value="{StaticResource ContextMenuTemplate}" />
        <Style.Resources>
            <Style TargetType="MenuItem">
                <Setter Property="local:ContextMenuHelper.ItemHoverBackground"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemsHoverBackground), RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                <Setter Property="local:ContextMenuHelper.ItemHoverBorderBrush"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemsHoverBorderBrush), RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                <Setter Property="local:ContextMenuHelper.ItemHoverForeground"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemsHoverForeground), RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                <Setter Property="Icon"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemsIcon), RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                <Setter Property="Foreground"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemsForeground), RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                <Setter Property="Background"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemsBackground), RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                <Setter Property="BorderBrush"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemsBorderBrush), RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                <Setter Property="Height"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemsHeight), RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                <Setter Property="BorderThickness"
                        Value="1" />
                <Setter Property="MinWidth"
                        Value="{Binding Path=(local:ContextMenuHelper.ItemsMinWidth), RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                <Setter Property="Template"
                        Value="{StaticResource ContextMenuItemTemplate}" />
            </Style>
        </Style.Resources>
    </Style>

</ResourceDictionary>
