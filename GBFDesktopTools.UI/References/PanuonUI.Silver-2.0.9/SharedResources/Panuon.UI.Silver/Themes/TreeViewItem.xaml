<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Panuon.UI.Silver"
                    xmlns:i="clr-namespace:Panuon.UI.Silver.Internal"
                    xmlns:ic="clr-namespace:Panuon.UI.Silver.Internal.Controls"
                    xmlns:rs="clr-namespace:Panuon.UI.Silver.Resources">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Panuon.UI.Silver;component/Resources/InternalResources.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Panuon.UI.Silver;component/Resources/Resources.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="{x:Static i:ResourceKeys.TreeViewStandardToggleButtonStyle}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="Margin"
                Value="0,0,3,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="Transparent">
                        <TextBlock x:Name="TxtToggle"
                                   Foreground="{Binding Path=(local:TreeViewHelper.ItemToggleBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem},Mode=OneWay}"
                                   Text="&#xe949;"
                                   FontFamily="pack://application:,,,/Panuon.UI.Silver;component/Resources/#PanuonIcon" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="True">
                            <Setter TargetName="TxtToggle"
                                    Property="Text"
                                    Value="&#xe94a;" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="TxtToggle"
                                    Property="Foreground"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemHoverToggleBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem},Mode=OneWay}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemExpandedToggleBrush),Converter={StaticResource {x:Static i:ResourceKeys.IsNotNullConverter}},RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}"
                                           Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="TxtToggle"
                                    Property="Foreground"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemExpandedToggleBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
                        </MultiDataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="{x:Static i:ResourceKeys.TreeViewItemStandardTemplate}"
                     TargetType="{x:Type TreeViewItem}">
        <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Rectangle x:Name="RectBack"
                       Fill="{TemplateBinding Background}" />
            <Grid x:Name="GrdHeader"
                  Height="{Binding Path=(local:TreeViewHelper.ItemHeight),RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}"
                  Background="Transparent"
                  Margin="{TemplateBinding Padding}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <ToggleButton x:Name="TbtnToggle"
                              IsChecked="{Binding IsExpanded,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}"
                              Style="{StaticResource {x:Static i:ResourceKeys.TreeViewStandardToggleButtonStyle}}" />
                <ic:IconControl x:Name="IcIcon"
                                Grid.Column="1"
                                Width="{Binding Path=(local:IconHelper.Width),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                Height="{Binding Path=(local:IconHelper.Height),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                MinWidth="{Binding Path=(local:IconHelper.MinWidth),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                MinHeight="{Binding Path=(local:IconHelper.MinHeight),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                MaxWidth="{Binding Path=(local:IconHelper.MaxWidth),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                MaxHeight="{Binding Path=(local:IconHelper.MaxHeight),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                Margin="{Binding Path=(local:IconHelper.Margin),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                Visibility="{Binding Path=(local:TreeViewHelper.ItemIcon),Converter={StaticResource {x:Static i:ResourceKeys.NullToCollapseConverter}},RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                Content="{Binding Path=(local:TreeViewHelper.ItemIcon),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                Foreground="{Binding Path=(local:IconHelper.Foreground),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                FontFamily="{Binding Path=(local:IconHelper.FontFamily),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                FontSize="{Binding Path=(local:IconHelper.FontSize),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center" />
                <ContentPresenter Grid.Column="2"
                                  ContentSource="Header"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Grid>
            <ItemsPresenter x:Name="ItemsHost"
                            Grid.Row="1"
                            Visibility="{Binding IsExpanded,Converter={StaticResource {x:Static rs:Converters.TrueToVisibleConverter}},RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="GrdHeader"
                     Property="IsMouseOver"
                     Value="True">
                <Setter Property="local:TreeViewHelper.IsMouseOver"
                        Value="True" />
            </Trigger>
            <Trigger SourceName="GrdHeader"
                     Property="IsMouseOver"
                     Value="False">
                <Setter Property="local:TreeViewHelper.IsMouseOver"
                        Value="False" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.IsMouseOver), RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}}"
                               Value="False" />
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemHoverBackground),Converter={StaticResource {x:Static i:ResourceKeys.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="RectBack"
                        Property="Fill"
                        Value="{Binding Path=(local:TreeViewHelper.ItemHoverBackground),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemSelectedBackground),Converter={StaticResource {x:Static i:ResourceKeys.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter  TargetName="RectBack"
                         Property="Fill"
                         Value="{Binding Path=(local:TreeViewHelper.ItemSelectedBackground),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
            </MultiDataTrigger>
            <Trigger Property="HasItems"
                     Value="False">
                <Setter TargetName="TbtnToggle"
                        Property="Visibility"
                        Value="Hidden" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Static i:ResourceKeys.TreeViewModernToggleButtonStyle}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Margin"
                Value="0,0,8,0" />
        <Setter Property="Width"
                Value="3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Rectangle x:Name="RectRectangle"
                               Fill="{Binding Path=(local:TreeViewHelper.ItemToggleBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem},Mode=OneWay}" />
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(local:TreeViewHelper.IsMouseOver),RelativeSource={RelativeSource AncestorType=TreeViewItem},Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource AncestorType=TreeViewItem},Mode=OneWay}"
                                           Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="RectRectangle"
                                    Property="Fill"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemHoverToggleBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem},Mode=OneWay}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource AncestorType=TreeViewItem},Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemExpandedToggleBrush),Converter={StaticResource {x:Static i:ResourceKeys.IsNotNullConverter}},RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}"
                                           Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="RectRectangle"
                                    Property="Fill"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemExpandedToggleBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="{x:Static i:ResourceKeys.TreeViewItemModernTemplate}"
                     TargetType="{x:Type TreeViewItem}">
        <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Rectangle x:Name="RectBack"
                       Fill="{TemplateBinding Background}" />
            <Grid x:Name="GrdHeader"
                  Height="{Binding Path=(local:TreeViewHelper.ItemHeight),RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <ToggleButton x:Name="TbtnToggle"
                              IsChecked="{Binding IsExpanded,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}"
                              Style="{StaticResource {x:Static i:ResourceKeys.TreeViewModernToggleButtonStyle}}" />
                <Grid Grid.Column="1"
                      Margin="{TemplateBinding Padding}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <ic:IconControl x:Name="IcIcon"
                                    Width="{Binding Path=(local:IconHelper.Width),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    Height="{Binding Path=(local:IconHelper.Height),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    MinWidth="{Binding Path=(local:IconHelper.MinWidth),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    MinHeight="{Binding Path=(local:IconHelper.MinHeight),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    MaxWidth="{Binding Path=(local:IconHelper.MaxWidth),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    MaxHeight="{Binding Path=(local:IconHelper.MaxHeight),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    Margin="{Binding Path=(local:IconHelper.Margin),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    Visibility="{Binding Path=(local:TreeViewHelper.ItemIcon),Converter={StaticResource {x:Static i:ResourceKeys.NullToCollapseConverter}},RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    Content="{Binding Path=(local:TreeViewHelper.ItemIcon),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    Foreground="{Binding Path=(local:IconHelper.Foreground),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    FontFamily="{Binding Path=(local:IconHelper.FontFamily),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    FontSize="{Binding Path=(local:IconHelper.FontSize),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Center" />
                    <ContentPresenter Grid.Column="1"
                                      ContentSource="Header"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                </Grid>
            </Grid>
            <ItemsPresenter x:Name="ItemsHost"
                            Grid.Row="1"
                            Visibility="{Binding IsExpanded,Converter={StaticResource {x:Static rs:Converters.TrueToVisibleConverter}},RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="GrdHeader"
                     Property="IsMouseOver"
                     Value="True">
                <Setter Property="local:TreeViewHelper.IsMouseOver"
                        Value="True" />
            </Trigger>
            <Trigger SourceName="GrdHeader"
                     Property="IsMouseOver"
                     Value="False">
                <Setter Property="local:TreeViewHelper.IsMouseOver"
                        Value="False" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.IsMouseOver), RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}}"
                               Value="False" />
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemHoverBackground),Converter={StaticResource {x:Static i:ResourceKeys.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="RectBack"
                        Property="Fill"
                        Value="{Binding Path=(local:TreeViewHelper.ItemHoverBackground),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemSelectedBackground),Converter={StaticResource {x:Static i:ResourceKeys.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter  TargetName="RectBack"
                         Property="Fill"
                         Value="{Binding Path=(local:TreeViewHelper.ItemSelectedBackground),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Static i:ResourceKeys.TreeViewChainToggleButtonStyle}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="Margin"
                Value="0,0,3,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="Transparent">
                        <TextBlock x:Name="TxtToggle"
                                   Foreground="{Binding Path=(local:TreeViewHelper.ItemToggleBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem},Mode=OneWay}"
                                   Text="&#xe945;"
                                   FontFamily="pack://application:,,,/Panuon.UI.Silver;component/Resources/#PanuonIcon" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="True">
                            <Setter TargetName="TxtToggle"
                                    Property="Text"
                                    Value="&#xe947;" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="TxtToggle"
                                    Property="Foreground"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemHoverToggleBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem},Mode=OneWay}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemExpandedToggleBrush),Converter={StaticResource {x:Static i:ResourceKeys.IsNotNullConverter}},RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}"
                                           Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="TxtToggle"
                                    Property="Foreground"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemExpandedToggleBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
                        </MultiDataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="{x:Static i:ResourceKeys.TreeViewItemChainTemplate}"
                     TargetType="{x:Type TreeViewItem}">
        <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Rectangle x:Name="RectBack"
                       Fill="{TemplateBinding Background}" />
            <Grid x:Name="GrdHeader"
                  Height="{Binding Path=(local:TreeViewHelper.ItemHeight),RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}"
                  Background="Transparent"
                  Margin="{TemplateBinding Padding}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <ToggleButton x:Name="TbtnToggle"
                              IsChecked="{Binding IsExpanded,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}"
                              Style="{StaticResource {x:Static i:ResourceKeys.TreeViewChainToggleButtonStyle}}" />
                <Rectangle RenderOptions.EdgeMode="Aliased"
                           StrokeThickness="1"
                           Stroke="Gray"
                           StrokeDashArray="2,3"
                           VerticalAlignment="Center"
                           Visibility="{Binding HasItems, Converter={StaticResource {x:Static rs:Converters.TrueToCollapseConverter}},RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                           Margin="{Binding ActualWidth, Converter={StaticResource {x:Static i:ResourceKeys.TreeViewChainHorizontalMarginConverter}},ElementName=TbtnToggle, Mode=OneWay}" />
                <ic:IconControl x:Name="IcIcon"
                                Grid.Column="1"
                                Width="{Binding Path=(local:IconHelper.Width),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                Height="{Binding Path=(local:IconHelper.Height),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                MinWidth="{Binding Path=(local:IconHelper.MinWidth),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                MinHeight="{Binding Path=(local:IconHelper.MinHeight),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                MaxWidth="{Binding Path=(local:IconHelper.MaxWidth),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                MaxHeight="{Binding Path=(local:IconHelper.MaxHeight),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                Margin="{Binding Path=(local:IconHelper.Margin),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                Visibility="{Binding Path=(local:TreeViewHelper.ItemIcon),Converter={StaticResource {x:Static i:ResourceKeys.NullToCollapseConverter}},RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                Content="{Binding Path=(local:TreeViewHelper.ItemIcon),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                Foreground="{Binding Path=(local:IconHelper.Foreground),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                FontFamily="{Binding Path=(local:IconHelper.FontFamily),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                FontSize="{Binding Path=(local:IconHelper.FontSize),RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center" />
                <ContentPresenter Grid.Column="2"
                                  ContentSource="Header"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Grid>
            <ItemsPresenter x:Name="ItemsHost"
                            Grid.Row="1"
                            Visibility="{Binding IsExpanded,Converter={StaticResource {x:Static rs:Converters.TrueToVisibleConverter}},RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" />
            <Rectangle Grid.Row="1"
                       RenderOptions.EdgeMode="Aliased"
                       StrokeThickness="1"
                       Stroke="Gray"
                       StrokeDashArray="2,3"
                       HorizontalAlignment="Left">
                <Rectangle.Margin>
                    <MultiBinding Converter="{StaticResource {x:Static i:ResourceKeys.TreeViewChainVerticalMarginConverter}}">
                        <Binding Path="ActualWidth"
                                 ElementName="TbtnToggle"
                                 Mode="OneWay" />
                        <Binding Path="Padding"
                                 RelativeSource="{RelativeSource TemplatedParent}"
                                 Mode="OneWay" />
                    </MultiBinding>
                </Rectangle.Margin>
            </Rectangle>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="GrdHeader"
                     Property="IsMouseOver"
                     Value="True">
                <Setter Property="local:TreeViewHelper.IsMouseOver"
                        Value="True" />
            </Trigger>
            <Trigger SourceName="GrdHeader"
                     Property="IsMouseOver"
                     Value="False">
                <Setter Property="local:TreeViewHelper.IsMouseOver"
                        Value="False" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.IsMouseOver), RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}}"
                               Value="False" />
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemHoverBackground),Converter={StaticResource {x:Static i:ResourceKeys.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="RectBack"
                        Property="Fill"
                        Value="{Binding Path=(local:TreeViewHelper.ItemHoverBackground),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemSelectedBackground),Converter={StaticResource {x:Static i:ResourceKeys.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter  TargetName="RectBack"
                         Property="Fill"
                         Value="{Binding Path=(local:TreeViewHelper.ItemSelectedBackground),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
            </MultiDataTrigger>
            <Trigger Property="HasItems"
                     Value="False">
                <Setter TargetName="TbtnToggle"
                        Property="Visibility"
                        Value="Hidden" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="TreeViewItem">
        <!--IconHelper-->
        <Setter Property="local:IconHelper.Foreground"
                Value="{Binding Foreground, RelativeSource={RelativeSource Self}}" />
        <!--TreeViewHelper-->
        <Setter Property="local:TreeViewHelper.ItemHeight"
                Value="{Binding Path=(local:TreeViewHelper.ItemsHeight),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemIcon"
                Value="{Binding Path=(local:TreeViewHelper.ItemsIcon),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemPadding"
                Value="{Binding Path=(local:TreeViewHelper.ItemsPadding),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemToggleEnabled"
                Value="{Binding Path=(local:TreeViewHelper.ItemsToggleEnabled),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemToggleBrush"
                Value="{Binding Path=(local:TreeViewHelper.ItemsToggleBrush),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemHoverToggleBrush"
                Value="{Binding Path=(local:TreeViewHelper.ItemsHoverToggleBrush),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemExpandedToggleBrush"
                Value="{Binding Path=(local:TreeViewHelper.ItemsSelectedToggleBrush),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemHoverForeground"
                Value="{Binding Path=(local:TreeViewHelper.ItemsHoverForeground),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemHoverBackground"
                Value="{Binding Path=(local:TreeViewHelper.ItemsHoverBackground),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemSelectedBackground"
                Value="{Binding Path=(local:TreeViewHelper.ItemsSelectedBackground),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemSelectedForeground"
                Value="{Binding Path=(local:TreeViewHelper.ItemsSelectedForeground),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <!--Properties-->
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="Template"
                Value="{StaticResource {x:Static i:ResourceKeys.TreeViewItemStandardTemplate}}" />
        <Setter Property="Padding">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource {x:Static i:ResourceKeys.TreeViewPaddingConverter}}">
                    <Binding Path="Padding"
                             RelativeSource="{RelativeSource AncestorType=TreeViewItem}"
                             Mode="OneWay" />
                    <Binding Path="(local:TreeViewHelper.ItemsPadding)"
                             RelativeSource="{RelativeSource AncestorType=TreeView}"
                             Mode="OneWay" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(local:TreeViewHelper.TreeViewStyle), RelativeSource={RelativeSource AncestorType=TreeView}, Mode=OneWay}"
                         Value="Modern">
                <Setter Property="Template"
                        Value="{StaticResource {x:Static i:ResourceKeys.TreeViewItemModernTemplate}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(local:TreeViewHelper.TreeViewStyle), RelativeSource={RelativeSource AncestorType=TreeView}, Mode=OneWay}"
                         Value="Chain">
                <Setter Property="Template"
                        Value="{StaticResource {x:Static i:ResourceKeys.TreeViewItemChainTemplate}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.IsMouseOver), RelativeSource={RelativeSource Self}}"
                               Value="True" />
                    <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}}"
                               Value="False" />
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemHoverForeground),Converter={StaticResource {x:Static i:ResourceKeys.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground"
                        Value="{Binding Path=(local:TreeViewHelper.ItemHoverForeground),RelativeSource={RelativeSource Self}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemSelectedForeground),Converter={StaticResource {x:Static i:ResourceKeys.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground"
                        Value="{Binding Path=(local:TreeViewHelper.ItemSelectedForeground),RelativeSource={RelativeSource Self}, Mode=OneWay}" />
                <Setter Property="local:IconHelper.Foreground"
                        Value="{Binding Path=(local:TreeViewHelper.ItemSelectedForeground),RelativeSource={RelativeSource Self}, Mode=OneWay}" />
            </MultiDataTrigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Opacity"
                        Value="{StaticResource {x:Static rs:ResourceKeys.DisabledOpacity}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
